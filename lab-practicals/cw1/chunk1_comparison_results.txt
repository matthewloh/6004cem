Static vs Dynamic(chunk=1) Scheduling Comparison Results
=======================================================
Generated: Tue Jun 10 11:51:45 AM +08 2025
Hostname: Ubuntor
User: matthew
System: Linux Ubuntor 6.11.0-26-generic #26~24.04.1-Ubuntu SMP PREEMPT_DYNAMIC Thu Apr 17 19:20:47 UTC 2 x86_64 x86_64 x86_64 GNU/Linux

================================================================
Part B: Static vs Dynamic(chunk=1) Scheduling Comparison
6004CEM Parallel and Distributed Programming Coursework
================================================================

=== SYSTEM VERIFICATION INFORMATION ===
Hostname: Ubuntor
System: Linux 6.11.0-26-generic
Architecture: x86_64
User: matthew
Execution Time: Tue Jun 10 11:51:45 2025
CPU Cores: 8
Max OpenMP Threads: 8
=========================================

OpenMP Configuration:
- Dynamic thread adjustment: DISABLED
- Nested parallelism: DISABLED
- Performance runs per test: 15
- Focus: Static vs Dynamic with chunk size 1


================================================================
COMPREHENSIVE TEST: 1K ELEMENTS (1000)
================================================================

Testing different thread configurations:
========================================================================
Threads | Static Time | Static StdDev | Dynamic(1) Time | Dynamic(1) StdDev | Winner
        |    (ms)     |     (ms)      |      (ms)       |       (ms)        |       
--------|-------------|---------------|-----------------|-------------------|--------
    Testing STATIC scheduling (1 threads)...
    Testing DYNAMIC (chunk=1) scheduling (1 threads)...
      1 |     0.0006 |       0.0002 |         0.0052 |           0.0007 | Static (+746.5%)
    Testing STATIC scheduling (2 threads)...
    Testing DYNAMIC (chunk=1) scheduling (2 threads)...
      2 |     0.0009 |       0.0006 |         0.0365 |           0.0138 | Static (+3841.0%)
    Testing STATIC scheduling (4 threads)...
    Testing DYNAMIC (chunk=1) scheduling (4 threads)...
      4 |     0.0015 |       0.0014 |         0.0230 |           0.0129 | Static (+1435.6%)

--- WORK DISTRIBUTION ANALYSIS ---
Vector size: 1000 elements, 4 threads

STATIC Scheduling:
  Base chunk size per thread: 250 elements
  Threads with extra element: 0
  Work distribution:
    Thread 0: elements 0-249 (250 elements)
    Thread 1: elements 250-499 (250 elements)
    Thread 2: elements 500-749 (250 elements)
    Thread 3: elements 750-999 (250 elements)

DYNAMIC (chunk=1) Scheduling:
  Chunk size: 1 element per assignment
  Total work assignments needed: 1000
  Average assignments per thread: 250.0
  Work assignment pattern: Round-robin, one element at a time
  Synchronization points: 1000 (one per element assignment)

--- SCHEDULING OVERHEAD ANALYSIS ---
Performance Comparison:
  Static average time:    0.000001 seconds
  Dynamic(1) average time: 0.000023 seconds
  Time difference:        0.000021 seconds
  Overhead percentage:    +1435.56%

Variability Analysis:
  Static std deviation:   0.000001 seconds (94.53%)
  Dynamic(1) std deviation: 0.000013 seconds (56.10%)

Throughput Comparison:
  Static throughput:      6.68e+08 elements/second
  Dynamic(1) throughput:  4.35e+07 elements/second
  Throughput ratio:       0.0651 (Dynamic/Static)

Estimated Costs:
  Synchronization points: 1000
  Cost per sync (approx): 2.15e-08 seconds
  Total sync overhead:    0.000021 seconds (93.5% of total time)
    Testing STATIC scheduling (8 threads)...
    Testing DYNAMIC (chunk=1) scheduling (8 threads)...
      8 |     0.0622 |       0.1390 |         0.0209 |           0.0036 | Dynamic(1) (+197.1%)

--- RESULTS VERIFICATION ---
✓ Static and Dynamic(1) scheduling produce identical results

================================================================
COMPREHENSIVE TEST: 10K ELEMENTS (10000)
================================================================

Testing different thread configurations:
========================================================================
Threads | Static Time | Static StdDev | Dynamic(1) Time | Dynamic(1) StdDev | Winner
        |    (ms)     |     (ms)      |      (ms)       |       (ms)        |       
--------|-------------|---------------|-----------------|-------------------|--------
    Testing STATIC scheduling (1 threads)...
    Testing DYNAMIC (chunk=1) scheduling (1 threads)...
      1 |     0.0034 |       0.0000 |         0.0324 |           0.0058 | Static (+860.7%)
    Testing STATIC scheduling (2 threads)...
    Testing DYNAMIC (chunk=1) scheduling (2 threads)...
      2 |     0.0014 |       0.0002 |         1.8633 |           2.6947 | Static (+130185.9%)
    Testing STATIC scheduling (4 threads)...
    Testing DYNAMIC (chunk=1) scheduling (4 threads)...
      4 |     0.0017 |       0.0011 |         0.8439 |           1.8274 | Static (+49637.9%)

--- WORK DISTRIBUTION ANALYSIS ---
Vector size: 10000 elements, 4 threads

STATIC Scheduling:
  Base chunk size per thread: 2500 elements
  Threads with extra element: 0
  Work distribution:
    Thread 0: elements 0-2499 (2500 elements)
    Thread 1: elements 2500-4999 (2500 elements)
    Thread 2: elements 5000-7499 (2500 elements)
    Thread 3: elements 7500-9999 (2500 elements)

DYNAMIC (chunk=1) Scheduling:
  Chunk size: 1 element per assignment
  Total work assignments needed: 10000
  Average assignments per thread: 2500.0
  Work assignment pattern: Round-robin, one element at a time
  Synchronization points: 10000 (one per element assignment)

--- SCHEDULING OVERHEAD ANALYSIS ---
Performance Comparison:
  Static average time:    0.000002 seconds
  Dynamic(1) average time: 0.000844 seconds
  Time difference:        0.000842 seconds
  Overhead percentage:    +49637.93%

Variability Analysis:
  Static std deviation:   0.000001 seconds (62.15%)
  Dynamic(1) std deviation: 0.001827 seconds (216.56%)

Throughput Comparison:
  Static throughput:      5.89e+09 elements/second
  Dynamic(1) throughput:  1.19e+07 elements/second
  Throughput ratio:       0.0020 (Dynamic/Static)

Estimated Costs:
  Synchronization points: 10000
  Cost per sync (approx): 8.42e-08 seconds
  Total sync overhead:    0.000842 seconds (99.8% of total time)
    Testing STATIC scheduling (8 threads)...
    Testing DYNAMIC (chunk=1) scheduling (8 threads)...
      8 |     0.0015 |       0.0007 |         0.1799 |           0.1139 | Static (+11996.4%)

--- RESULTS VERIFICATION ---
✓ Static and Dynamic(1) scheduling produce identical results

================================================================
COMPREHENSIVE TEST: 50K ELEMENTS (50000)
================================================================

Testing different thread configurations:
========================================================================
Threads | Static Time | Static StdDev | Dynamic(1) Time | Dynamic(1) StdDev | Winner
        |    (ms)     |     (ms)      |      (ms)       |       (ms)        |       
--------|-------------|---------------|-----------------|-------------------|--------
    Testing STATIC scheduling (1 threads)...
    Testing DYNAMIC (chunk=1) scheduling (1 threads)...
      1 |     0.0105 |       0.0002 |         0.3471 |           0.1769 | Static (+3196.4%)
    Testing STATIC scheduling (2 threads)...
    Testing DYNAMIC (chunk=1) scheduling (2 threads)...
      2 |     0.0055 |       0.0025 |         1.4504 |           0.6843 | Static (+26233.1%)
    Testing STATIC scheduling (4 threads)...
    Testing DYNAMIC (chunk=1) scheduling (4 threads)...
      4 |     0.0043 |       0.0003 |         0.9217 |           0.0414 | Static (+21543.6%)

--- WORK DISTRIBUTION ANALYSIS ---
Vector size: 50000 elements, 4 threads

STATIC Scheduling:
  Base chunk size per thread: 12500 elements
  Threads with extra element: 0
  Work distribution:
    Thread 0: elements 0-12499 (12500 elements)
    Thread 1: elements 12500-24999 (12500 elements)
    Thread 2: elements 25000-37499 (12500 elements)
    Thread 3: elements 37500-49999 (12500 elements)

DYNAMIC (chunk=1) Scheduling:
  Chunk size: 1 element per assignment
  Total work assignments needed: 50000
  Average assignments per thread: 12500.0
  Work assignment pattern: Round-robin, one element at a time
  Synchronization points: 50000 (one per element assignment)

--- SCHEDULING OVERHEAD ANALYSIS ---
Performance Comparison:
  Static average time:    0.000004 seconds
  Dynamic(1) average time: 0.000922 seconds
  Time difference:        0.000917 seconds
  Overhead percentage:    +21543.60%

Variability Analysis:
  Static std deviation:   0.000000 seconds (6.33%)
  Dynamic(1) std deviation: 0.000041 seconds (4.49%)

Throughput Comparison:
  Static throughput:      1.17e+10 elements/second
  Dynamic(1) throughput:  5.42e+07 elements/second
  Throughput ratio:       0.0046 (Dynamic/Static)

Estimated Costs:
  Synchronization points: 50000
  Cost per sync (approx): 1.83e-08 seconds
  Total sync overhead:    0.000917 seconds (99.5% of total time)
    Testing STATIC scheduling (8 threads)...
    Testing DYNAMIC (chunk=1) scheduling (8 threads)...
      8 |     0.0031 |       0.0005 |         0.7797 |           0.0168 | Static (+25419.2%)

--- RESULTS VERIFICATION ---
✓ Static and Dynamic(1) scheduling produce identical results

================================================================
COMPREHENSIVE TEST: 100K ELEMENTS (100000)
================================================================

Testing different thread configurations:
========================================================================
Threads | Static Time | Static StdDev | Dynamic(1) Time | Dynamic(1) StdDev | Winner
        |    (ms)     |     (ms)      |      (ms)       |       (ms)        |       
--------|-------------|---------------|-----------------|-------------------|--------
    Testing STATIC scheduling (1 threads)...
    Testing DYNAMIC (chunk=1) scheduling (1 threads)...
      1 |     0.0241 |       0.0053 |         0.7740 |           0.8068 | Static (+3116.5%)
    Testing STATIC scheduling (2 threads)...
    Testing DYNAMIC (chunk=1) scheduling (2 threads)...
      2 |     0.4050 |       1.0246 |         2.1790 |           0.5386 | Static (+438.0%)
    Testing STATIC scheduling (4 threads)...
    Testing DYNAMIC (chunk=1) scheduling (4 threads)...
      4 |     0.0150 |       0.0256 |         1.9816 |           0.5099 | Static (+13074.4%)

--- WORK DISTRIBUTION ANALYSIS ---
Vector size: 100000 elements, 4 threads

STATIC Scheduling:
  Base chunk size per thread: 25000 elements
  Threads with extra element: 0
  Work distribution:
    Thread 0: elements 0-24999 (25000 elements)
    Thread 1: elements 25000-49999 (25000 elements)
    Thread 2: elements 50000-74999 (25000 elements)
    Thread 3: elements 75000-99999 (25000 elements)

DYNAMIC (chunk=1) Scheduling:
  Chunk size: 1 element per assignment
  Total work assignments needed: 100000
  Average assignments per thread: 25000.0
  Work assignment pattern: Round-robin, one element at a time
  Synchronization points: 100000 (one per element assignment)

--- SCHEDULING OVERHEAD ANALYSIS ---
Performance Comparison:
  Static average time:    0.000015 seconds
  Dynamic(1) average time: 0.001982 seconds
  Time difference:        0.001967 seconds
  Overhead percentage:    +13074.42%

Variability Analysis:
  Static std deviation:   0.000026 seconds (170.08%)
  Dynamic(1) std deviation: 0.000510 seconds (25.73%)

Throughput Comparison:
  Static throughput:      6.65e+09 elements/second
  Dynamic(1) throughput:  5.05e+07 elements/second
  Throughput ratio:       0.0076 (Dynamic/Static)

Estimated Costs:
  Synchronization points: 100000
  Cost per sync (approx): 1.97e-08 seconds
  Total sync overhead:    0.001967 seconds (99.2% of total time)
    Testing STATIC scheduling (8 threads)...
    Testing DYNAMIC (chunk=1) scheduling (8 threads)...
      8 |     0.0056 |       0.0030 |         1.5859 |           0.0714 | Static (+28052.0%)

--- RESULTS VERIFICATION ---
✓ Static and Dynamic(1) scheduling produce identical results

================================================================
COMPREHENSIVE TEST: 500K ELEMENTS (500000)
================================================================

Testing different thread configurations:
========================================================================
Threads | Static Time | Static StdDev | Dynamic(1) Time | Dynamic(1) StdDev | Winner
        |    (ms)     |     (ms)      |      (ms)       |       (ms)        |       
--------|-------------|---------------|-----------------|-------------------|--------
    Testing STATIC scheduling (1 threads)...
    Testing DYNAMIC (chunk=1) scheduling (1 threads)...
      1 |     1.4280 |       1.4443 |         1.8150 |           0.3163 | Static (+27.1%)
    Testing STATIC scheduling (2 threads)...
    Testing DYNAMIC (chunk=1) scheduling (2 threads)...
      2 |     0.6035 |       1.1738 |         9.3512 |           2.1342 | Static (+1449.4%)
    Testing STATIC scheduling (4 threads)...
    Testing DYNAMIC (chunk=1) scheduling (4 threads)...
      4 |     0.0566 |       0.0178 |         7.5902 |           0.4470 | Static (+13312.7%)

--- WORK DISTRIBUTION ANALYSIS ---
Vector size: 500000 elements, 4 threads

STATIC Scheduling:
  Base chunk size per thread: 125000 elements
  Threads with extra element: 0
  Work distribution:
    Thread 0: elements 0-124999 (125000 elements)
    Thread 1: elements 125000-249999 (125000 elements)
    Thread 2: elements 250000-374999 (125000 elements)
    Thread 3: elements 375000-499999 (125000 elements)

DYNAMIC (chunk=1) Scheduling:
  Chunk size: 1 element per assignment
  Total work assignments needed: 500000
  Average assignments per thread: 125000.0
  Work assignment pattern: Round-robin, one element at a time
  Synchronization points: 500000 (one per element assignment)

--- SCHEDULING OVERHEAD ANALYSIS ---
Performance Comparison:
  Static average time:    0.000057 seconds
  Dynamic(1) average time: 0.007590 seconds
  Time difference:        0.007534 seconds
  Overhead percentage:    +13312.68%

Variability Analysis:
  Static std deviation:   0.000018 seconds (31.47%)
  Dynamic(1) std deviation: 0.000447 seconds (5.89%)

Throughput Comparison:
  Static throughput:      8.84e+09 elements/second
  Dynamic(1) throughput:  6.59e+07 elements/second
  Throughput ratio:       0.0075 (Dynamic/Static)

Estimated Costs:
  Synchronization points: 500000
  Cost per sync (approx): 1.51e-08 seconds
  Total sync overhead:    0.007534 seconds (99.3% of total time)
    Testing STATIC scheduling (8 threads)...
    Testing DYNAMIC (chunk=1) scheduling (8 threads)...
      8 |     2.6142 |       6.0265 |         7.8600 |           1.0734 | Static (+200.7%)

--- RESULTS VERIFICATION ---
✓ Static and Dynamic(1) scheduling produce identical results

================================================================
THEORETICAL ANALYSIS: STATIC vs DYNAMIC(chunk=1)
================================================================

STATIC SCHEDULING CHARACTERISTICS:
✓ Work Distribution: Large contiguous chunks per thread
✓ Synchronization: Minimal (only at parallel region boundaries)
✓ Cache Performance: Excellent (sequential access within chunks)
✓ Predictability: High (deterministic work assignment)
✓ Overhead: Very low scheduling overhead
✗ Load Balancing: Poor if threads finish at different times
✗ Adaptability: Cannot adapt to runtime conditions

DYNAMIC(chunk=1) SCHEDULING CHARACTERISTICS:
✓ Load Balancing: Perfect (work assigned as threads become available)
✓ Adaptability: Excellent adaptation to system conditions
✓ Fairness: Equal opportunity for all threads to get work
✗ Synchronization: High overhead (one sync per element)
✗ Cache Performance: Poor (threads may access distant memory)
✗ Predictability: Low (non-deterministic work assignment)
✗ Overhead: Very high scheduling overhead

PERFORMANCE TRADE-OFFS:
Vector Size Impact:
  • Small vectors: Dynamic(1) overhead dominates, Static likely faster
  • Large vectors: Dynamic(1) overhead amortized, may be competitive
  • Very large vectors: Memory bandwidth becomes limiting factor

Thread Count Impact:
  • Few threads: Static overhead minimal, usually faster
  • Many threads: Dynamic(1) synchronization contention increases
  • More threads = more synchronization points in Dynamic(1)

System Load Impact:
  • Light load: Static performs predictably well
  • Heavy load: Dynamic(1) may adapt better to thread interruptions
  • Variable load: Dynamic(1) provides better load balancing

================================================================
CACHE AND MEMORY ACCESS ANALYSIS
================================================================
MEMORY ACCESS PATTERNS:

Static Scheduling:
  Memory Layout: Thread 0 accesses elements [0...n/p-1]
                 Thread 1 accesses elements [n/p...2n/p-1]
                 etc.
  Cache Behavior: • Excellent spatial locality
                  • Sequential prefetching works well
                  • Minimal cache line conflicts between threads
                  • Predictable memory bandwidth usage

Dynamic(chunk=1) Scheduling:
  Memory Layout: Thread assignment unpredictable
                 Thread 0 might access [0, 4, 8, 12, ...]
                 Thread 1 might access [1, 5, 9, 13, ...]
  Cache Behavior: • Poor spatial locality
                  • Cache line sharing between threads
                  • Increased cache misses
                  • Unpredictable memory access patterns

CACHE LINE EFFECTS:
  Typical cache line size: 64 bytes (8 double-precision values)
  Static: Each thread works on separate cache lines
  Dynamic(1): Multiple threads may share same cache lines
  False sharing potential: High in Dynamic(1), Low in Static

MEMORY BANDWIDTH UTILIZATION:
  Static: Efficient, predictable bandwidth usage
  Dynamic(1): Potentially inefficient due to scattered access
  Impact: More significant as vector size increases

================================================================
CONCLUSIONS AND RECOMMENDATIONS
================================================================
KEY FINDINGS:
1. Static scheduling typically outperforms Dynamic(chunk=1) for vector addition
2. Dynamic(chunk=1) has significant synchronization overhead
3. Cache performance heavily favors Static scheduling
4. The overhead of Dynamic(chunk=1) is most visible with smaller vectors
5. Load balancing benefits of Dynamic(chunk=1) rarely justify its costs

WHEN TO USE EACH:

Use STATIC scheduling when:
✓ Vector addition or similar simple, uniform operations
✓ Predictable, homogeneous computing environment
✓ Cache performance is important
✓ Minimizing synchronization overhead is critical
✓ Working with regular, balanced workloads

Use DYNAMIC(chunk=1) scheduling when:
✓ Work per iteration is highly variable (not applicable here)
✓ System load is unpredictable and threads may be interrupted
✓ Perfect load balancing is more important than efficiency
✓ Cache performance is not critical
✓ Working with very large datasets where overhead amortizes

PERFORMANCE OPTIMIZATION RECOMMENDATIONS:
1. For vector addition, prefer Static scheduling
2. If using Dynamic, choose larger chunk sizes (not 1)
3. Consider Guided scheduling as a compromise
4. Profile your specific system and workload
5. Monitor cache miss rates and memory bandwidth

COURSEWORK IMPLICATIONS:
✓ This analysis demonstrates understanding of scheduling trade-offs
✓ Shows knowledge of cache and memory system effects
✓ Provides empirical evidence for scheduling choices
✓ Explains theoretical concepts with practical measurements
✓ Addresses the specific case of chunk size 1 in detail

================================================================
PROGRAM COMPLETED SUCCESSFULLY
================================================================
This analysis specifically compared Static scheduling against
Dynamic scheduling with chunk size 1, showing the extreme case
of fine-grained work distribution and its performance implications.
================================================================
